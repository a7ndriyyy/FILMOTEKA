{"version":3,"file":"static/js/433.0c287ed7.chunk.js","mappings":"uNAEaA,EAAYC,EAAAA,GAAAA,IAAH,qFAMTC,EAAUD,EAAAA,GAAAA,QAAH,8F,qKCPPE,EAAOF,EAAAA,GAAAA,GAAH,+R,SCkBjB,EAhBiB,SAAC,GAAuC,IAArCG,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UAGtC,OACE,UAACH,EAAD,WACGC,GACC,gBAAKG,IAAG,UALG,mCAKH,OAAgBH,GAAgBI,IAAKF,KAE7C,gBAAKC,IAAK,mDAAYC,IAAKF,KAE7B,wBAAKD,KACL,uBAAIC,MAGT,ECfYG,EAAOR,EAAAA,GAAAA,GAAH,uJCyBjB,EAxBiB,SAAC,GAAc,IAAZS,EAAW,EAAXA,KACZC,EAAM,IAAIC,IAChB,OACE,SAACH,EAAD,UACGC,GACCA,EAAKG,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIT,EAAoC,EAApCA,KAAMD,EAA8B,EAA9BA,aAAcE,EAAgB,EAAhBA,UAClC,OAAKK,EAAII,IAAID,GAWJ,MAVPH,EAAIK,IAAIF,IAEN,SAAC,EAAD,CAEET,KAAMA,EACND,aAAcA,EACdE,UAAWA,GAHNQ,GASZ,KAGR,E,SCcD,EAhCa,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOP,EAAP,KAAaQ,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,WAAMZ,GAAN,mGAESa,EAAAA,EAAAA,IAAab,GAFtB,gBAENJ,EAFM,EAENA,KACRQ,EAAQR,GAHM,gDAKdkB,QAAQC,IAAI,KAAMC,SAClBR,GAAS,GACTF,GAAW,GAPG,yBASdA,GAAW,GATG,4EAAH,sDAafM,EAAUH,EACX,GAAE,CAACA,KAEF,SAAC,IAAD,WACE,UAAC,IAAD,WACGJ,IAAW,SAAC,EAAD,CAAUT,KAAMA,IAC3BW,IAAS,SAACU,EAAA,EAAD,QAIjB,C,0CC/BD,IAJc,WACZ,OAAO,wBAAI,SACZ,C,+LCFKC,EAAW,+BAMV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACSC,EAAAA,EAAAA,IAAA,UAAaF,EAAb,sBADT,uCACoDG,MADpD,kEAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BtB,GAA9B,iFACSoB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA+BlB,IADxC,uCAC+CqB,MAD/C,kEAKA,SAAeR,EAAtB,+CAAO,OAAP,oBAAO,WAA4Bb,GAA5B,iFACSoB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA+BlB,EAA/B,aADT,uCACuDqB,MADvD,kEAKA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA8BvB,GAA9B,iFACSoB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,kBAA+BlB,EAA/B,aADT,uCACuDqB,MADvD,kEAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,0FAA0CC,EAA1C,+BAAiD,EAAjD,SAEGN,EAAAA,EAAAA,IAAA,UAAaF,EAAb,+BAA4CO,EAA5C,iBAA8DC,IAFjE,uCAGHL,MAHG,mEAxBPD,EAAAA,EAAAA,SAAAA,OAAwB,CACtBO,QAFc,mC","sources":["components/App.styled.js","components/Cast/CastItem/CastItem.styled.js","components/Cast/CastItem/CastItem.jsx","components/Cast/CastList/CastList.styled.js","components/Cast/CastList/CastList.jsx","components/Cast/Cast.jsx","components/Error/Error.jsx","services/movie-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 1100px;\n  padding: 0 16px;\n  margin: 0 auto;\n`;\n\nexport const Section = styled.section`\n  padding: 60px 0;\n  border-bottom: 1px solid #eee;\n  height: 100%;\n`;","import styled from 'styled-components';\nexport const Item = styled.li`\n  /* width: calc((100% - 14px * 4) / 5); */\n  width: 200px;\n  min-height: 410px;\n  text-align: center;\n\n  img {\n    border: 1px solid #eee;\n    width: 200px;\n    height: 300px;\n  }\n  h2 {\n    margin-bottom: 8px;\n  }\n  p {\n    font-size: 18px;\n  }\n`;","import React from 'react';\nimport { Item } from './CastItem.styled';\n\nconst CastItem = ({ profile_path, name, character }) => {\n  const BASE_IMG = 'https://image.tmdb.org/t/p/w200';\n\n  return (\n    <Item>\n      {profile_path ? (\n        <img src={`${BASE_IMG}${profile_path}`} alt={character} />\n      ) : (\n        <img src={'Заглушка'} alt={character} />\n      )}\n      <h2>{name}</h2>\n      <p>{character}</p>\n    </Item>\n  );\n};\n\nexport default CastItem;","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  margin-top: 46px;\n\n  gap: 14px;\n`;","import CastItem from '../CastItem/CastItem';\nimport { List } from './CastList.styled';\n\nconst CastList = ({ cast }) => {\n  const set = new Set();\n  return (\n    <List>\n      {cast &&\n        cast.map(({ id, name, profile_path, character }) => {\n          if (!set.has(id)) {\n            set.add(id);\n            return (\n              <CastItem\n                key={id}\n                name={name}\n                profile_path={profile_path}\n                character={character}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n    </List>\n  );\n};\n\nexport default CastList;","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCastMovie } from 'services/movie-api';\nimport { Container, Section } from 'components/App.styled';\nimport CastList from './CastList/CastList';\nimport Error from 'components/Error/Error';\n\nconst Cast = () => {\n  const [cast, setCast] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchData = async id => {\n      try {\n        const { cast } = await getCastMovie(id);\n        setCast(cast);\n      } catch (error) {\n        console.log(error.message);\n        setError(true);\n        setLoading(false);\n      } finally {\n        setLoading(true);\n      }\n    };\n\n    fetchData(movieId);\n  }, [movieId]);\n  return (\n    <Section>\n      <Container>\n        {loading && <CastList cast={cast} />}\n        {error && <Error />}\n      </Container>\n    </Section>\n  );\n};\n\nexport default Cast;","import React from 'react';\n\nconst Error = () => {\n  return <h1>Error</h1>;\n};\n\nexport default Error;","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '22ba7957556991080b2d9f0336ac306f';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport async function getMovies() {\n  return (await axios.get(`${BASE_URL}/trending/all/day`)).data;\n}\n\nexport async function getMoveDetails(id) {\n  return (await axios.get(`${BASE_URL}/movie/${id}`)).data;\n}\n\n\nexport async function getCastMovie(id) {\n  return (await axios.get(`${BASE_URL}/movie/${id}/credits`)).data;\n}\n\n\nexport async function getReviewMovie(id) {\n  return (await axios.get(`${BASE_URL}/movie/${id}/reviews`)).data;\n}\n\n\n\nexport async function getSearchMovies(queryText, page = 1) {\n  return (\n    await axios.get(`${BASE_URL}/search/movie?query=${queryText}&page=${page}`)\n  ).data;\n}"],"names":["Container","styled","Section","Item","profile_path","name","character","src","alt","List","cast","set","Set","map","id","has","add","useState","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","fetchData","getCastMovie","console","log","message","Error","BASE_URL","getMovies","axios","data","getMoveDetails","getReviewMovie","getSearchMovies","queryText","page","api_key"],"sourceRoot":""}